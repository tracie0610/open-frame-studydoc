<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN" lang="zh-CN"><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/><title>Groovy 使 Spring 更出色，第 1 部分: 集成的基础知识</title><!-- s-header-meta  for china -->
<meta http-equiv="PICS-Label" content='(PICS-1.1 "http://www.icra.org/ratingsv02.html" l gen true r (cz 1 lz 1 nz 1 oz 1 vz 1) "http://www.rsac.org/ratingsv01.html" l gen true r (n 0 s 0 v 0 l 0) "http://www.classify.org/safesurf/" l gen true r (SS~~000 1))' />
<link rel="schema.DC" href="http://purl.org/DC/elements/1.0/" />
<link rel="SHORTCUT ICON" href="http://www.ibm.com/favicon.ico" />
<meta name="Owner" content="dw@cn.ibm.com" />
<meta name="DC.Language" scheme="rfc1766" content="zh-CN" />
<meta name="IBM.Country" content="CN" />
<meta name="Security" content="Public" />
<!-- 5.8 0421 egd: Added IBM.Special.Purpose meta tag and the meta tag to suppress the WI login in the masthead -->
<meta name="IBM.SpecialPurpose" content="SP001" />
<meta name="IBM.PageAttributes" content="sid=1003"/><meta name="Abstract" content="Spring Framework 为 Web 和企业应用程序提供了坚实的基础。通过支持 Groovy 等动态语言，Spring 添加了一些功能，从而使应用程序架构更加灵活、更具动态性。在包含 2 部分的系列文章的第 1 部分中，您将学习将 Groovy 集成到 Spring 应用程序的基础知识。" /><meta name="Description" content="Spring Framework 为 Web 和企业应用程序提供了坚实的基础。通过支持 Groovy 等动态语言，Spring 添加了一些功能，从而使应用程序架构更加灵活、更具动态性。在包含 2 部分的系列文章的第 1 部分中，您将学习将 Groovy 集成到 Spring 应用程序的基础知识。" /><meta name="Keywords" content="java, groovy, spring, spring framework, beans, architecture, dynamic language, flexible, refreshable, scripting, JVM, Scott Leberknight, 架构, 动态语言, 灵活, 刷新, 脚本编写, tttjca, tttosca" /><meta name="DC.Date" scheme="iso8601" content="2009-02-04" /><meta name="DC.Type" scheme="IBM_ContentClassTaxonomy" content="CT316" /><meta name="DC.Subject" scheme="IBM_SubjectTaxonomy" content="TT300" /><meta name="DC.Rights" content="Copyright (c) 2009 by IBM Corporation" /> <meta name="Robots" content="index,follow" /><meta name="IBM.Effective" scheme="W3CDTF" content="2009-02-04" /><meta name="Last update" content="05022009zoucl@cn.ibm.com" /><!-- STYLESHEETS/SCRIPTS -->
<!-- for tables -->
<link rel="stylesheet" type="text/css" media="screen,print" href="//www.ibm.com/common/v14/table.css" /> 
<!-- end for tables -->
<script language="JavaScript" src="/developerworks/js/dwcss14.js" type="text/javascript"></script>
<link rel="stylesheet" type="text/css" href="//www.ibm.com/common/v14/main.css" />
<link rel="stylesheet" type="text/css" media="all" href="//www.ibm.com/common/v14/cn/zh/screen.css" />
<link rel="stylesheet" type="text/css" media="print" href="//www.ibm.com/common/v14/cn/zh/print.css" />
<script type="text/javascript" src="//www.ibm.com/common/js/ibmcommon.js">//</script>
<script language="JavaScript" src="//www.ibm.com/common/v14/cn/zh/detection.js" type="text/javascript"></script>
<script language="JavaScript" src="/developerworks/js/dropdown.js" type="text/javascript"></script>
<script language="JavaScript" src="/developerworks/email/grabtitle.js" type="text/javascript"></script>
<script language="JavaScript" src="/developerworks/email/emailfriend2.js" type="text/javascript"></script><script language="JavaScript" src="/developerworks/js/urltactic.js" type="text/javascript"></script><script language="JavaScript" type="text/javascript">
 <!--
 setDefaultQuery('dwchina');
 //-->
</script>
<!--START RESERVED FOR FUTURE USE INCLUDE FILES--><script language="javascript" src="/developerworks/js/ajax1.js" type="text/javascript"></script><script language="javascript" src="/developerworks/js/searchcount.js" type="text/javascript"></script><!--END RESERVED FOR FUTURE USE INCLUDE FILES--><script language="JavaScript" type="text/javascript">var emailAbstract = "Spring Framework 为 Web 和企业应用程序提供了坚实的基础。通过支持 Groovy 等动态语言，Spring 添加了一些功能，从而使应用程序架构更加灵活、更具动态性。在包含 2 部分的系列文章的第 1 部分中，您将学习将 Groovy 集成到 Spring 应用程序的基础知识。"; </script></head><body><!--MASTHEAD_BEGIN--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr valign="top"><td class="bbg" width="110"><a href="http://www.ibm.com/cn/"><img alt="IBM&reg;" border="0" height="52" src="//www.ibm.com/i/v14/t/ibm-logo.gif" width="110"/></a></td><td class="bbg"><img src="//www.ibm.com/i/c.gif" width="1" height="1" border="0" alt=""/></td><td align="right" class="mbbg" width="650"><table border="0" cellpadding="0" cellspacing="0" align="right"><tr class="cty-tou"><td rowspan="2" width="17" class="upper-masthead-corner"><a href="#main"><img src="//www.ibm.com/i/c.gif" border="0" width="1" height="1" alt="跳转到主要内容"/></a></td><td align="left"><table border="0" cellpadding="0" cellspacing="0" align="left"><tr><td><span class="spacer">&nbsp;&nbsp;&nbsp;&nbsp;</span><b class="country">中国</b><span class="spacer">&nbsp;[</span><a class="ur-link" href="http://www.ibm.com/developerworks/cn/country/">选择</a><span class="spacer">]</span></td><td width="29" class="upper-masthead-divider">&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="left"><a class="ur-link" href="http://www.ibm.com/legal/cn/">使用条款</a></td></tr></table></td><td width="40">&nbsp;</td></tr><tr><td class="cty-tou-border" height="1" colspan="2"><img src="//www.ibm.com/i/c.gif" alt="" height="1" width="1"/></td></tr><tr><td colspan="3"><img alt="" height="8" src="//www.ibm.com/i/c.gif" width="1"/></td></tr><tr><td>&nbsp;</td><td align="center" colspan="2"><form method="get" action="http://www-128.ibm.com/developerworks/search/searchResults.jsp" id="form1" name="form1"><input type="hidden" name="searchType" value="1"/><input type="hidden" name="searchSite" value="dWChina"/><input type="hidden" name="pageLang" value="zh"/><input type="hidden" name="langEncoding" value="UTF8"/><table border="0" cellpadding="0" cellspacing="0"><tr><td width="1"><img src="//www.ibm.com/i/c.gif" width="1" height="1" alt="Select a scope:"/></td><td align="right">

<label for="sq">
<select id="sq" name="searchScope" class="input-scope">
<option value="dW" selected="selected">dW 全部内容</option>
<option value="dW">-----------------</option>
<option value="aixunix">&nbsp;&nbsp;AIX and UNIX</option>
<option value="dmdd">&nbsp;&nbsp;Information management</option>
<option value="lotusdd">&nbsp;&nbsp;Lotus</option>
<option value="rdd">&nbsp;&nbsp;Rational</option>
<option value="wsdd">&nbsp;&nbsp;WebSphere</option>
<option value="dW">-----------------</option>
<option value="archZ">&nbsp;&nbsp;Architecture</option>
<option value="gridZ">&nbsp;&nbsp;Grid computing</option>
<option value="javaZ">&nbsp;&nbsp;Java 技术</option>
<option value="linuxZ">&nbsp;&nbsp;Linux</option>
<option value="paZ">&nbsp;&nbsp;Multicore acceleration</option>
<option value="opensrcZ">&nbsp;&nbsp;Open source</option>
<option value="securityZ">&nbsp;&nbsp;Security</option>
<option value="webservZ">&nbsp;&nbsp;SOA &amp; Web services</option>
<option value="webarchZ">&nbsp;&nbsp;Web development</option>
<option value="xmlZ">&nbsp;&nbsp;XML</option>
<option value="dW">-----------------</option>
<option value="all">IBM 全部内容</option>
</select>
</label></td><td width="1" align="right"><img src="//www.ibm.com/i/c.gif" width="1" height="1" alt="Search for:"/>&nbsp;&nbsp;</td><td align="right"><input class="input" id="q" maxlength="100" name="query" size="15" type="text" value=""/></td><td width="7">&nbsp;</td><td><label for="q"><input alt="搜索" name="Search" src="//www.ibm.com/i/v14/t/cn/zh/search.gif" type="image" value="搜索"/></label></td><td width="20">&nbsp;</td></tr></table></form></td></tr></table></td></tr><tr><td class="blbg" colspan="3"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><table border="0" cellpadding="0" cellspacing="0"><tr><td><span class="spacer">&nbsp;&nbsp;&nbsp;&nbsp;</span></td><td><a class="masthead-mainlink" href="http://www.ibm.com/cn/">首页</a></td><td class="masthead-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</td><td><a class="masthead-mainlink" href="http://www.ibm.com/products/cn/">产品</a></td><td class="masthead-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</td><td><a class="masthead-mainlink" href="http://www.ibm.com/servicessolutions/cn/">服务与解决方案</a></td>	<td class="masthead-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</td><td><a class="masthead-mainlink" href="http://www.ibm.com/support/cn/">支持与下载</a></td><td class="masthead-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</td><td><a class="masthead-mainlink" href="http://www.ibm.com/account/cn/">个性化服务</a></td><td><span class="spacer">&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr></table></td></tr></table></td></tr></table><!--
<script src="//www.ibm.com/common/v14/pmh.js" language="JavaScript" type="text/javascript"></script>
-->
<!-- end masthead dw liquid -->
<!--MASTHEAD_END--><!-- CMA ID: 366525 --> <!-- Site ID: 10 --><table id="v14-body-table" border="0" cellpadding="0" cellspacing="0" width="100%"><tr valign="top"><!--LEFTNAV_BEGIN--><td id="navigation" width="150"><table width="150" cellspacing="0" cellpadding="0" border="0"><tr><td class="left-nav-spacer"><a href="http://www.ibm.com/developerworks/cn/" class="left-nav-overview"> </a></td></tr></table><table width="150" cellspacing="0" cellpadding="0" border="0"><tr><td colspan="2" class="left-nav-overview"><a href="http://www.ibm.com/developerworks/cn/" class="left-nav-overview">developerWorks<br />中国</a></td></tr></table><table width="150" cellspacing="0" cellpadding="0" border="0"><tr><td colspan="2" class="left-nav"><a class="left-nav" href="http://www.ibm.com/developerworks/cn/views/java/libraryview.jsp?search_by=groovy+spring
" onmouseover="linkQueryAppend(this)">本系列的更多信息:</a><br /><a class="left-nav-child" href="http://www.ibm.com/developerworks/cn/views/java/libraryview.jsp?search_by=groovy+spring
" onmouseover="linkQueryAppend(this)">Groovy 使 Spring 更出色</a></td></tr><tr><td class="dw-left-nav-separator" width="14"><img alt="" height="6" width="14" src="//www.ibm.com/i/c.gif"/></td><td class="dw-left-nav-separator" width="136"><img alt="" height="6" width="136" src="//www.ibm.com/i/c.gif"/></td></tr><tr><td colspan="2" class="left-nav-highlight"><a href="#" class="left-nav">本文内容包括：</a></td></tr><tr class="left-nav-child-highlight"><td><img alt="" height="8" width="2" src="//www.ibm.com/i/v14/t/cl-bullet.gif"/></td><td><a href="#N100C0" class="left-nav-child">更巧妙的 Spring bean</a></td></tr><tr class="left-nav-child-highlight"><td><img alt="" height="8" width="2" src="//www.ibm.com/i/v14/t/cl-bullet.gif"/></td><td><a href="#N10115" class="left-nav-child">Groovy bean 配置</a></td></tr><tr class="left-nav-child-highlight"><td><img alt="" height="8" width="2" src="//www.ibm.com/i/v14/t/cl-bullet.gif"/></td><td><a href="#N10380" class="left-nav-child">使用 Groovy bean</a></td></tr><tr class="left-nav-child-highlight"><td><img alt="" height="8" width="2" src="//www.ibm.com/i/v14/t/cl-bullet.gif"/></td><td><a href="#N103C1" class="left-nav-child">结束语</a></td></tr><tr class="left-nav-child-highlight"><td><img alt="" height="8" width="2" src="//www.ibm.com/i/v14/t/cl-bullet.gif"/></td><td><a href="#download" class="left-nav-child">下载</a></td></tr><tr class="left-nav-child-highlight"><td><img alt="" height="8" width="2" src="//www.ibm.com/i/v14/t/cl-bullet.gif"/></td><td><a href="#resources" class="left-nav-child">参考资料 </a></td></tr><tr class="left-nav-child-highlight"><td><img alt="" height="8" width="2" src="//www.ibm.com/i/v14/t/cl-bullet.gif"/></td><td><a href="#author" class="left-nav-child">关于作者</a></td></tr><tr class="left-nav-child-highlight"><td><img alt="" height="8" width="2" src="//www.ibm.com/i/v14/t/cl-bullet.gif"/></td><td><a href="#rate" class="left-nav-child">对本文的评价</a></td></tr><tr class="left-nav-last"><td width="14"><img class="display-img" alt="" height="1" width="14" src="//www.ibm.com/i/c.gif"/></td><td width="136"><img class="display-img" alt="" height="19" width="136" src="//www.ibm.com/i/v14/t/left-nav-corner.gif"/></td></tr></table><br /><table width="150" cellspacing="0" cellpadding="0" border="0"><tr><td class="related" colspan="2"><b class="related">相关链接：</b></td></tr><tr class="rlinks"><td><img alt="" height="8" width="2" src="//www.ibm.com/i/v14/t/rl-bullet.gif"/></td><td><a class="rlinks" href="http://www.ibm.com/developerworks/cn/views/java/libraryview.jsp">Java technology 技术文档库</a></td></tr><tr class="rlinks"><td><img alt="" height="8" width="2" src="//www.ibm.com/i/v14/t/rl-bullet.gif"/></td><td><a class="rlinks" href="http://www.ibm.com/developerworks/cn/views/opensource/libraryview.jsp">Open source 技术文档库</a></td></tr><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- No content currently --><!--END RESERVED FOR FUTURE USE INCLUDE FILES--><tr><td width="14"><img class="display-img" alt="" height="1" width="14" src="//www.ibm.com/i/c.gif"/></td><td width="136"><img class="display-img" alt="" height="19" width="136" src="//www.ibm.com/i/c.gif"/></td></tr></table><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- Next Steps Area:  Start -->
<!-- Commented out the include call in the dwmaster version of this file to prevent ajax calls
     being made during article previews and testing.  Live site has uncommented copy of this file (jpp) -->
<!-- Call Next Steps Servlet -->
<script language="JavaScript" type="text/javascript">
<!--
/*
 * ajaxInclude makes a call to the url and render the results in the div tag specified in divId
 */
function ajaxInclude(url, divId) { 
 var req = newXMLHttpRequest(); 
 if (req) { 
   req.onreadystatechange = getReadyStateHandler(req, 
	function (result) {  
           var contents = document.getElementById(divId);  
           if (result != null && result.length > 0 && contents != null) {
	     contents.innerHTML = result;  
           }
        }); 
   req.open("GET", url, true);
   req.send("");
 }
}
//-->
</script>

<!-- Display Next Steps Result -->
<div id="nextsteps"></div>

<!-- Initiate Next Steps Call -->
<script language="JavaScript" type="text/javascript">
<!-- 
 ajaxInclude("/developerworks/niagara/jsp/getNiagaraContent.jsp?url="+window.location.href,"nextsteps");
//-->
</script>
<!-- Next Steps Area:  End --><!--END RESERVED FOR FUTURE USE INCLUDE FILES--></td><!--LEFTNAV_END--><td width="100%"><table id="content-table" border="0" cellpadding="0" cellspacing="0" width="100%"><tr valign="top"><td width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><a name="main"><img border="0" alt="跳转到主要内容" height="1" width="592" src="//www.ibm.com/i/c.gif"/></a></td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr valign="top"><td height="18" width="10"><img alt="" height="18" width="10" src="//www.ibm.com/i/c.gif"/></td><td width="100%"><img alt="" height="6" width="1" src="//www.ibm.com/i/c.gif"/><br /><a href="http://www.ibm.com/developerworks/cn/" class="bctl">developerWorks 中国</a><span class="bct">  &gt;  </span><a class="bctl" href="http://www.ibm.com/developerworks/cn/java/">Java technology</a><span class="bct"> | </span><a href="http://www.ibm.com/developerworks/cn/opensource/" class="bctl">Open source</a><span class="bct">  &gt;</span><img alt="" height="1" width="1" src="//www.ibm.com/i/c.gif"/><br /><h1><span style="color: #999999">Groovy 使 Spring 更出色，第 1 部分: </span>集成的基础知识</h1><p id="subtitle"><em>看看 Groovy 如何增加基于 Spring 的应用程序的灵活性</em></p><img alt="" height="6" width="1" src="//www.ibm.com/i/c.gif" class="display-img"/></td><td class="no-print" width="192"><img alt="developerWorks" height="18" width="192" src="/developerworks/i/dw.gif"/></td></tr></table></td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr valign="top"><td width="10"><img alt="" height="1" width="10" src="//www.ibm.com/i/c.gif"/></td><td width="100%"><table class="no-print" border="0" width="160" cellspacing="0" cellpadding="0" align="right"><tr><td width="10"><img alt="" height="1" width="10" src="//www.ibm.com/i/c.gif"/></td><td><table width="150" cellspacing="0" cellpadding="0" border="0"><tr><td class="v14-header-1-small">文档选项</td></tr></table><table class="v14-gray-table-border" cellspacing="0" cellpadding="0" border="0"><tr><td class="no-padding" width="150"><table width="143" cellspacing="0" cellpadding="0" border="0"><script language="JavaScript" type="text/javascript">
<!--
document.write('<tr valign="top"><td width="8"><img src="//www.ibm.com/i/c.gif" width="8" height="1" alt=""/></td><td width="16"><img alt="将打印机的版面设置成横向打印模式" height="16" src="//www.ibm.com/i/v14/icons/printer.gif" width="16" vspace="3" /></td><td width="122"><p><b><a class="smallplainlink" href="javascript:print()">打印本页</a></b></p></td></tr>');
//-->
</script>
<noscript></noscript><form action="https://www.ibm.com/developerworks/secure/email-it.jsp" name="email"><input value="Spring Framework 为 Web 和企业应用程序提供了坚实的基础。通过支持 Groovy 等动态语言，Spring 添加了一些功能，从而使应用程序架构更加灵活、更具动态性。在包含 2 部分的系列文章的第 1 部分中，您将学习将 Groovy 集成到 Spring 应用程序的基础知识。" name="body" type="hidden"/><input value="Groovy 使 Spring 更出色，第 1 部分: 集成的基础知识" name="subject" type="hidden"/><input value="cn" name="lang" type="hidden"/><script language="JavaScript" type="text/javascript">
<!--
document.write('<tr valign="top"><td width="8"><img src="//www.ibm.com/i/c.gif" width="8" height="1" alt=""/></td><td width="16"><img src="//www.ibm.com/i/v14/icons/em.gif" height="16" width="16" vspace="3" alt="将此页作为电子邮件发送" /></td><td width="122"><p><a class="smallplainlink" href="javascript:document.email.submit();"><b>将此页作为电子邮件发送</b></a></p></td></tr>');
//-->
</script><noscript><tr valign="top"><td width="8"><img alt="" height="1" width="8" src="//www.ibm.com/i/c.gif"/></td><td width="16"><img alt="" width="16" height="16" src="//www.ibm.com/i/c.gif"/></td><td class="small" width="122"><p><span class="ast">未显示需要 JavaScript 的文档选项</span></p></td></tr></noscript></form><tr valign="top"><td width="8"><img alt="" height="1" width="8" src="//www.ibm.com/i/c.gif"/></td><td width="16"><img alt="" vspace="3" border="0" width="16" height="16" src="//www.ibm.com/i/v14/icons/dn.gif"/></td><td width="122"><p><a href="#download" class="smallplainlink"><b>样例代码</b></a></p></td></tr><tr valign="top"><td width="8"><img alt="" height="1" width="8" src="//www.ibm.com/i/c.gif"/></td><td width="16"><img alt="英文原文 " vspace="3" width="16" height="16" src="//www.ibm.com/i/v14/icons/fw_bold.gif"/></td><td width="122"><p><a onmouseover="linkQueryAppend(this)" href="http://www.ibm.com/developerworks/java/library/j-groovierspring1.html" class="smallplainlink"><b>英文原文</b></a></p></td></tr></table></td></tr></table><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- this content will be automatically generated across all content areas --><!--END RESERVED FOR FUTURE USE INCLUDE FILES--><br /></td></tr></table><p>级别： 中级</p><p><a href="#author">Scott Leberknight</a>, 首席架构师, Near Infinity Corporation<br /></p><p>2009 年  2 月  04 日</p><blockquote>Spring Framework 为 Web 和企业应用程序提供了坚实的基础。通过支持 Groovy 等动态语言，Spring 添加了一些功能，从而使应用程序架构更加灵活、更具动态性。在包含 <a href="http://www.ibm.com/developerworks/cn/views/java/libraryview.jsp?search_by=groovy+spring">2 部分的系列文章</a> 的第一部分中，您将学习将 Groovy 集成到 Spring 应用程序的基础知识。</blockquote><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- include java script once we verify teams wants to use this and it will work on dbcs and cyrillic characters -->

<!--END RESERVED FOR FUTURE USE INCLUDE FILES-->
			<p>Spring 2.0 支持将动态语言集成到基于 Spring 的应用程序中。Spring 开箱即用地支持 Groovy、JRuby 和 BeanShell。以 Groovy、JRuby 或任何受支持的语言（当然包括 Java&#8482; 语言）编写的应用程序部分可以无缝地集成到 Spring 应用程序中。应用程序其他部分的代码不需要知道或关心单个 Spring bean 的实现语言。</p>
			<p>Spring 支持动态语言意味着应用程序可以获得灵活性和动态性，并且没有任何附加条件。在本系列的第 1 部分中，您将看到如何将 Spring 和 Groovy 一起使用，以及这个强大集成如何为应用程序增加有趣的功能。例如，您可能需要频繁地更改小块的业务逻辑、应用程序发出的 e-mail 消息中包含的文本、应用程序生成的 PDF 格式和布局等。为了进行更改，传统的应用程序架构可能需要完全重新部署应用程序。Spring 支持 Groovy 之后，您可以这样更改一个已部署的应用程序，并使这些更改立即生效。我将讨论这一功能为应用程序所带来的好处，以及可能引发的问题。本文中所有例子的完整的源代码（参见 <a href="#download">下载</a>）都可以下载。</p>
			<p><a name="N10081"><span class="smalltitle">Spring 的动态语言支持</span></a></p>
			<p>动态语言支持将 Spring 从一个以 Java 为中心的应用程序框架改变成一个以 <i>JVM</i> 为中心的应用程序框架。现在，Spring 不再只是让 Java 开发变得更容易。它还允许将以静态和动态语言编写的代码轻松地插入到 Spring 支持的分层架构方法中，从而使 JVM 的开发也变得更加容易。如果您已经熟悉 Spring，那么您会感到很舒服：可以利用 Spring 已经提供的所有特性 &#8212; 控制反转（IoC）和依赖项注入、面向方面编程（AOP）、声明式事务划分、Web 和数据访问框架集成、远程调用等 &#8212; 同时又可以使用灵活动态的语言，比如 Groovy。</p>
			<p>Spring 通过 <code>ScriptFactory</code> 和 <code>ScriptSource</code> 接口支持动态语言集成。<code>ScriptFactory</code> 接口定义用于创建和配置脚本 Spring bean 的机制。理论上，所有在 JVM 上运行语言都受支持，因此可以选择特定的语言来创建自己的实现。<code>ScriptSource</code> 定义 Spring 如何访问实际的脚本源代码；例如，通过文件系统或 URL。Groovy 语言集成通过 <code>ScriptFactory</code> 的 <code>GroovyScriptFactory</code> 实现得到支持。</p>
			<p><a name="N100AB"><span class="smalltitle">为什么是 Groovy？</span></a></p>
			<p>根据官方的 Groovy 站点，Groovy 是 “用于 Java 虚拟机的一种敏捷的动态语言”，它 “以 Java 的强大功能为基础，同时又包含由 Python、Ruby 和 Smalltalk 等语言带来的强大附加功能”，例如动态类型转换、闭包和<i>元编程（metaprogramming）</i>支持（参见 <a href="#resources">参考资料</a>）。它是一种成熟的面向对象编程语言，既可以用于面向对象编程，又可以用作纯粹的脚本语言。我喜欢将它看作是没有讨厌代码，但又具有闭包和动态语言中的其他特性的 Java 语言。</p>
			<p>Groovy 特别适合与 Spring 的动态语言支持一起使用，因为它是专门为 JVM 设计的，设计时充分考虑了 Java 集成，这使 Groovy 与 Java 代码的互操作很容易。它的类 Java 语法对于 Java 开发人员来说也很自然。</p>
			<p>接下来，看看如何将 Groovy 代码集成到基于 Spring 的应用程序中。</p>
			<br /><table border="0" cellspacing="0" cellpadding="0" width="100%"><tr><td><img width="100%" src="//www.ibm.com/i/v14/rules/blue_rule.gif" height="1" alt=""/><br /><img alt="" width="8" height="6" border="0" src="//www.ibm.com/i/c.gif"/></td></tr></table><table class="no-print" cellspacing="0" cellpadding="0" align="right"><tr align="right"><td><img width="100%" height="4" src="//www.ibm.com/i/c.gif" alt=""/><br /><table border="0" cellpadding="0" cellspacing="0"><tr><td valign="middle"><img width="16" src="//www.ibm.com/i/v14/icons/u_bold.gif" height="16" border="0" alt=""/><br /></td><td valign="top" align="right"><a href="#main" class="fbox"><b>回页首</b></a></td></tr></table></td></tr></table><br /><br /><p><a name="N100C0"><span class="atitle">更巧妙的 Spring bean</span></a></p>
			<p>在 Spring 应用程序中使用 Groovy bean 很容易，就像使用 Java bean 一样。（但是，在后面可以看到，对于如何配置它们，则有很多选项）。首先，需要定义一个接口作为 Groovy bean 必须遵从的约定。虽然不是非得定义接口不可，但是大多数 Spring 应用程序会通过接口（而不是具体实现类）来定义应用程序组件之间的交互和依赖项，以促进松散耦合并为测试提供便利。</p>
			<p>例如，假设有一个定义如何从 <code>Invoice</code> 对象生成 PDF 的接口。如清单 1 所示：</p>
			<br /><a name="listing1"><b>清单 1. <code>PdfGenerator</code> 接口</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
public interface PdfGenerator {
    byte[] pdfFor(Invoice invoice);
}
</pre></td></tr></table><br />
			<p><code>PdfGenerator</code> 接口被用作 Groovy 实现类必须遵从的约定。这很容易，因为 Groovy 类可以像 Java 类那样实现接口。清单 2 显示了 <code>PdfGenerator</code> 的 Groovy 实现，它使用 iText 库（参见 <a href="#resources">参考资料</a>）完成实际的 PDF 生成；它返回一个包含 PDF 内容的字节数组：</p>
			<br /><a name="listing2"><b>清单 2. <code>GroovyPdfGenerator</code></b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
class GroovyPdfGenerator implements PdfGenerator {

    String companyName

    public byte[] pdfFor(Invoice invoice) {
        Document document = new Document(PageSize.LETTER)
        ByteArrayOutputStream output = new ByteArrayOutputStream()
        PdfWriter.getInstance(document, output)
        document.open()
        Font headerFont = new Font(family: Font.HELVETICA, size: 24.0, style: Font.ITALIC)
        document.add(new Paragraph("$companyName", headerFont))
        document.add(new Paragraph("Invoice $invoice.orderNumber"))
        document.add(new Paragraph("Total amount: \$ ${invoice.total}"))
        document.close()
        output.toByteArray()
    }
}
</pre></td></tr></table><br />
			<p><code>GroovyPdfGenerator</code> 已准备就绪。它定义了一个名为 <code>companyName</code> 的 string 属性，该属性在生成的 PDF 发票上与订单号和总额一起使用。此时，可以将 <code>GroovyPdfGenerator</code> 集成到 Spring 应用程序中。使用 Java 语言编写的 bean 必须编译成 .class 文件，但是在使用基于 Groovy 的 bean 时，则有几种选择：</p>
			<ul>
				<li>将 Groovy 类编译成普通的 Java 类文件</li>
				<li>在一个 .groovy 文件中定义 Groovy 类或脚本</li>
				<li>在 Spring 配置文件中以内联方式编写 Groovy 脚本</li>
			</ul>
			<p>可以选择不同的方法在 Spring 应用程序上下文中定义和配置 Groovy bean，这取决于 Groovy bean 采用的选项。接下来，我们将探讨每一种配置选项。</p>
			<br /><table border="0" cellspacing="0" cellpadding="0" width="100%"><tr><td><img width="100%" src="//www.ibm.com/i/v14/rules/blue_rule.gif" height="1" alt=""/><br /><img alt="" width="8" height="6" border="0" src="//www.ibm.com/i/c.gif"/></td></tr></table><table class="no-print" cellspacing="0" cellpadding="0" align="right"><tr align="right"><td><img width="100%" height="4" src="//www.ibm.com/i/c.gif" alt=""/><br /><table border="0" cellpadding="0" cellspacing="0"><tr><td valign="middle"><img width="16" src="//www.ibm.com/i/v14/icons/u_bold.gif" height="16" border="0" alt=""/><br /></td><td valign="top" align="right"><a href="#main" class="fbox"><b>回页首</b></a></td></tr></table></td></tr></table><br /><br /><p><a name="N10115"><span class="atitle">Groovy bean 配置</span></a></p>
			<p>通常，可以使用 XML 配置用 Java 代码编写的 Spring bean，或者 &#8212; 从 Spring 2.5（参见 <a href="#resources">参考资料</a>）开始 &#8212; 使用注释进行配置，后者可以显著减少 XML 配置。当配置 Groovy bean 时，可用的选项取决于是使用编译的 Groovy 类还是 .groovy 文件中定义的 Groovy 类。需要记住的是，您可以使用 Groovy 实现 bean，然后可以像 Java 编程那样编译它们；或者在 .groovy 文件中以类似脚本的形式实现它们，然后由 Spring 负责在创建应用程序上下文时编译它们。</p>
			<p>如果选择在 .groovy 文件中实现 bean，那么您<i>不必</i> 自己编译它们。相反，Spring 读取文件，获得脚本源代码并在运行时编译它们，使它们可用于应用程序上下文。这比直接编译更灵活性，因为不一定必须将 .groovy 文件部署在应用程序的 JAR 或 WAR 文件中，它们还可以来自文件系统的某个地方或 URL。</p>
			<p>接下来介绍各种不同的配置选项的应用。要记住在构建过程中自己编译的 Groovy 类中定义的 bean 与在 .groovy 脚本中定义的 bean 之间的区别。</p>
			<p><a name="N1012E"><span class="smalltitle">配置编译的 Groovy 类</span></a></p>
			<p>配置已经编译成 .class 文件的 Groovy bean，这与配置基于 Java 的 bean 完全一样。假设您已经使用 <code>groovyc</code> 编译器编译了 <code>GroovyPdfGenerator</code>，那么可以使用常规的 Spring XML 配置定义 bean，如清单 3 所示：</p>
			<br /><a name="listing3"><b>清单 3. 使用 XML 配置预编译的 <code>GroovyPdfGenerator</code>
				</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&lt;bean id="pdfGenerator" class="groovierspring.GroovyPdfGenerator"&gt;
    &lt;property name="companyName" value="Groovy Bookstore"/&gt;
&lt;/bean&gt;
</pre></td></tr></table><br />
			<table align="right" border="0" cellspacing="0" cellpadding="0" width="40%"><tr><td width="10"><img alt="" height="1" width="10" src="//www.ibm.com/i/c.gif"/></td><td><table border="1" cellspacing="0" cellpadding="5" width="100%"><tr><td bgcolor="#eeeeee">
				<a name="N1014E"><b>Groovy bean 上没有基于构造函数的注入</b></a><br />
				<p>不幸的是，目前还不能使用构造函数注入在 Groovy bean 上设置属性（或任何其他动态语言 bean，比如 JRuby bean）。原因之一是脚本可以定义多个实现类和逻辑，以根据运行时环境或其他因素选择不同的实现。换句话说，实际的构造是由脚本完成的，而不是 Spring。Spring 使用 setter 注入在返回的 bean 上设置属性。<a href="#listing7">清单 7</a> 显示了一个例子。</p>
			</td></tr></table></td></tr></table>
			<p><a href="#listing3">清单 3</a> 中的配置是一个简单的旧的 Spring bean 定义。它是用 Groovy 实现的，但这一点不重要。在包含 <code>pdfGenerator</code> bean 的 Spring 应用程序中，任何其他组件都可以使用它，而不必知道或关心它的实现细节或语言。还可以像往常一样使用 <code>&lt;property&gt;</code> 元素在 bean 上设置属性。（Spring 2.0 引入了 <code>p</code> 名称空间，以便更简练地定义属性，但是我坚持使用 <code>&lt;property&gt;</code> 元素，因为我发现它们可读性更好 &#8212; 这完全是个人的喜好）。</p>
			<p>另外，如果使用 Spring 2.5 或更高版本，还可以使用基于注释的 <code>GroovyPdfGenerator</code> 的配置。在此情况下，不必在 XML 应用程序上下文中实际定义 bean；相反，可以用 <code>@Component</code> 构造型注释来注释类，如清单 4 所示：</p>
			<br /><a name="listing4"><b>清单 4. 用 <code>@Component</code> 注释 <code>GroovyPdfGenerator</code></b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
@Component("pdfGenerator")
class GroovyPdfGenerator implements PdfGenerator {
    ...
}
</pre></td></tr></table><br />
			<p>然后，在 Spring 应用程序上下文 XML 配置中启用注释配置和组件扫描，如清单 5 所示：</p>
			<br /><a name="listing5"><b>清单 5. 启用 Spring 注释配置和组件扫描</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&lt;context:annotation-config/&gt;
&lt;context:component-scan base-package="groovierspring"/&gt;
</pre></td></tr></table><br />
			<p>不管使用 XML 还是注释来配置编译后的 Groovy bean，这种配置与普通的基于 Java bean 的配置是一样的。</p>
			<p><a name="N1019F"><span class="smalltitle">配置来自 Groovy 脚本的 bean</span></a></p>
			<p>配置来自 .groovy 脚本的 Groovy bean 与配置编译后的 Groovy bean 大不相同。在这里，事情开始变得更加有趣。将 Groovy 脚本转换为 bean 的机制包括读取并编译 Groovy 脚本，然后使之可以在 Spring 应用程序上下文中作为 bean 使用。第一步是定义一个 bean，它的类型可以认为是 <code>GroovyScriptFactory</code>，并且指向 Groovy 脚本的位置，如清单 6 所示：</p>
			<br /><a name="listing6"><b>清单 6. 定义 <code>GroovyScriptFactory</code> bean</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&lt;bean id="pdfGenerator"
      class="org.springframework.scripting.groovy.GroovyScriptFactory"&gt;
    &lt;constructor-arg value="classpath:groovierspring/GroovyPdfGenerator.groovy"/&gt;
    &lt;property name="companyName" value="Groovier Bookstore"/&gt;
&lt;/bean&gt;
</pre></td></tr></table><br />
			<p>在这个清单中，<code>pdfGenerator</code> bean 被定义为 <code>GroovyScriptFactory</code>。<code>&lt;constructor-arg&gt;</code> 元素定义要配置的 Groovy 脚本的位置。特别要注意，这指向一个 Groovy <i>脚本</i>，而不是一个已编译的 Groovy 类。可以使用定义 Spring bean 的语法设置用脚本编写的对象的属性。正如您预期的那样，<a href="#listing6">清单 6</a> 中的 <code>&lt;property&gt;</code> 元素设置 <code>companyName</code> 属性。</p>
			<p>GroovyPdfGenerator.groovy <i>脚本</i> 必须包含至少一个实现接口的类。通常，最好的做法是遵从标准 Java 实现，每个 .groovy 文件定义一个 Groovy 类。但是，您可能想在脚本中实现用于确定创建哪种类型的 bean 的逻辑。例如，可以在 GroovyPdfGenerator.groovy 中定义 <code>PdfGenerator</code> 接口的两种不同的实现，并直接在脚本中执行确定应该返回哪种实现的逻辑。清单 7 定义两种不同的 <code>PdfGenerator</code> 实现，并根据系统的属性选择使用一种实现：</p>
			<br /><a name="listing7"><b>清单 7. Groovy 脚本中的多个类定义</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
class SimpleGroovyPdfGenerator implements PdfGenerator {
    ...
}

class ComplexGroovyPdfGenerator implements PdfGenerator {
    ...
}

def type = System.properties['generatorType']
if (type == 'simple')
    return new SimpleGroovyPdfGenerator()
}
else {
    return new ComplexGroovyPdfGenerator()
}
</pre></td></tr></table><br />
			<p>如这段代码所示，可以通过用脚本编写的 bean 根据系统属性选择不同的实现。当 <code>generatorType</code> 系统属性为 <code>simple</code> 时，该脚本创建并返回一个 <code>SimpleGroovyPdfGenerator</code>；否则，它返回一个 <code>ComplexGroovyPdfGenerator</code>。由于简单和复杂的实现都实现了 <code>PdfGenerator</code> 接口，因此 Spring 应用程序中使用 <code>pdfGenerator</code> bean 的代码不必知道也不必关心实际的实现是什么。</p>
			<p>注意，仍然可以像 <a href="#listing6">清单 6</a> 那样在从脚本返回的 bean 上设置属性。所以，如果脚本返回一个 <code>ComplexGroovyPdfGenerator</code>，则设置该 bean 上的 <code>companyName</code> 属性。如果不需要定义多个实现，那么可以在 Groovy 脚本文件中仅定义一个类，如清单 8 所示。在这种情况下，Spring 发现并实例化这个惟一的类。 </p>
			<br /><a name="listing8"><b>清单 8. 典型的 Groovy 脚本实现</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
class GroovyPdfGenerator implements PdfGenerator {
    ...
}
</pre></td></tr></table><br />
			<p>至此，您可能想知道为什么 <a href="#listing6">清单 6</a> 将 bean 定义为一个 <code>GroovyScriptFactory</code>。那是因为 Spring 通过一个与 <code>ScriptFactoryPostProcessor</code> bean 结合的 <code>ScriptFactory</code> 实现（在这里是一个 Groovy 工厂）创建脚本对象。<code>ScriptFactoryPostProcessor</code> bean 负责用由工厂创建的实际对象替换工厂 bean。清单 9 显示添加后处理器 bean 的附加配置：</p>
			<br /><a name="listing9"><b>清单 9. 定义 <code>ScriptFactoryPostProcessor</code> bean</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&lt;bean class="org.springframework.scripting.support.ScriptFactoryPostProcessor"/&gt;
</pre></td></tr></table><br />
			<p>当 Spring 装载应用程序上下文时，它首先创建工厂 bean（例如 <code>GroovyScriptFactory</code> bean）。然后，执行 <code>ScriptFactoryPostProcessor</code> bean，用实际的脚本对象替换所有的工厂 bean。例如，<a href="#listing6">清单 6</a> 和 <a href="#listing9">清单 9</a> 中的配置产生一个名为 <code>pdfGenerator</code> 的 bean，它的类型是 <code>groovierspring.GroovyPdfGenerator</code>。（如果启用 Spring 中的 debug 级日志记录，并观察应用程序上下文的启动，将会看到 Spring 首先创建一个名为 <code>scriptFactory.pdfGenerator</code> 的工厂 bean，然后 <code>ScriptFactoryPostProcessor</code> 从该工厂 bean 创建 <code>pdfGenerator</code> bean）。</p>
			<p>现在，您已知道使用 <code>GroovyScriptFactory</code> 和 <code>ScriptFactoryPostProcessor</code> 配置脚本编写的 Groovy bean 的底层细节，接下来我将展示一种更简单、更整洁的方法。这种方法可以得到相同结果。Spring 专门为创建脚本 bean 提供了 <code>lang</code> XML 模式。清单 10 使用 <code>lang</code> 模式定义 <code>pdfGenerator</code> bean：</p>
			<br /><a name="listing10"><b>清单 10. 使用 <code>&lt;lang:groovy&gt;</code> 定义脚本 bean</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&lt;lang:groovy id="pdfGenerator"
             script-source="classpath:groovierspring/GroovyPdfGenerator.groovy"&gt;
    &lt;lang:property name="companyName" value="Really Groovy Bookstore"/&gt;
&lt;/lang:groovy&gt;
</pre></td></tr></table><br />
			<p>这段代码产生的 <code>pdfGenerator</code> bean 与 <a href="#listing6">清单 6</a> 和 <a href="#listing9">清单 9</a> 中更冗长的配置产生的 bean 是一样的，但是它更整洁、更简练，而且意图更清晰。<code>&lt;lang:groovy&gt;</code> bean 定义需要 <code>script-source</code> 属性；这告诉 Spring 如何找到 Groovy 脚本源代码。此外，可以使用 <code>&lt;lang:property&gt;</code> 元素为脚本 bean 设置属性。使用 <code>&lt;lang:groovy&gt;</code> 定义基于 Groovy 的 bean 是一种更好的选择。对阅读 Spring 配置的人而言，这种选项也更加清晰。</p>
			<p><a name="N102B3"><span class="smalltitle">配置内联 Groovy 脚本</span></a></p>
			<p>为了实现完整性，我将介绍：Spring 还支持直接在 bean 定义中编写 Groovy 脚本。清单 11 使用一个内联脚本创建 <code>pdfGenerator</code>：</p>
			<br /><a name="listing11"><b>清单 11. 内联定义脚本 bean</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&lt;lang:groovy id="pdfGenerator"&gt;
    &lt;lang:inline-script&gt;
        &lt;![CDATA[
        class GroovyPdfGenerator implements PdfGenerator {
            ...
        }
        ]]&gt;
    &lt;/lang:inline-script&gt;
    &lt;lang:property name="companyName" value="Icky Groovy Bookstore"/&gt;
&lt;/lang:groovy&gt;
</pre></td></tr></table><br />
			<p>这段代码使用 <code>&lt;lang:groovy&gt;</code> 和 <code>&lt;lang:inline-script&gt;</code> 标记定义 <code>pdfGenerator</code> bean，它包含定义类的 Groovy 脚本。可以像前面一样使用 <code>&lt;lang:property&gt;</code> 设置属性。您可能已经猜到，我不建议在 XML 配置文件中定义脚本 bean（或这一方面的任何类型的代码）。</p>
			<p><a name="N102DC"><span class="smalltitle">使用 Grails Bean Builder 配置 bean</span></a></p>
			<p>Grails Web framework 在幕后依赖于 Spring。Grails 提供了 Bean Builder，这是一个很棒的特性，让您可以使用 Groovy 代码<i>编程式地</i> 定义 Spring bean（参见 <a href="#resources">参考资料</a>）。编程式地定义 bean 比 XML 配置更灵活，因为可以在 bean 定义脚本中嵌入逻辑，而这在 XML 中是不可能的。通过使用 Bean Builder，可以为已编译 Groovy 类和用脚本编写的 Groovy bean 创建 bean 定义。清单 12 使用已编译的 Groovy 类定义 <code>pdfGenerator</code> bean：</p>
			<br /><a name="listing12"><b>清单 12. 使用 Bean Builder 定义已编译的 Groovy bean</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
def builder = new grails.spring.BeanBuilder()
builder.beans {
    pdfGenerator(GroovyPdfGenerator) {
        companyName = 'Compiled BeanBuilder Bookstore'
    }
}
def appContext = builder.createApplicationContext()
def generator = context.pdfGenerator
</pre></td></tr></table><br />
			<p><a href="#listing12">清单 12</a> 中的代码首先实例化一个 <code>BeanBuilder</code>，然后通过方法调用创建 bean。每个方法调用和可选的闭包参数定义一个 bean，并设置 bean 属性。例如，<code>pdfGenerator(GroovyPdfGenerator)</code> 定义一个名为 <code>pdfGenerator</code> 的 bean，其类型为 <code>GroovyPdfGenerator</code>，闭包中的代码则设置 <code>companyName</code> 属性。当然，在 <code>beans</code> 闭包中可以定义多个 bean。</p>
			<p>通过使用 Bean Builder，还可以从 Groovy 脚本而不是已编译的 Groovy 类创建 bean。但是，Bean Builder 没有 <code>&lt;lang:groovy&gt;</code> 配置中的语法糖（syntactic sugar，即在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用），所以需要将 bean 定义为 <code>GroovyScriptFactory</code>，并创建一个 <code>ScriptFactoryPostProcessor</code> bean。清单 13 是一个例子，展示如何使用 Bean Builder 配置用脚本编写的 Groovy bean：</p>
			<br /><a name="listing13"><b>清单 13. 使用 Bean Builder 定义用脚本编写的 Groovy bean</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
def builder = new grails.spring.BeanBuilder()
builder.beans {
    pdfGenerator(GroovyScriptFactory,
                'classpath:groovierspring/GroovyPdfGenerator.groovy') {
        companyName = 'Scripted BeanBuilder Bookstore'
    }
    scriptFactoryPostProcessor(ScriptFactoryPostProcessor)
}
def appContext = builder.createApplicationContext()
def generator = context.pdfGenerator
</pre></td></tr></table><br />
			<p><a href="#listing13">清单 13</a> 中的代码在逻辑上等同于 <a href="#listing6">清单 6</a> 和 <a href="#listing9">清单 9</a> 中的 XML 配置。当然，<a href="#listing13">清单 13</a> 是使用 Groovy 代码来定义 bean。为了定义 <code>pdfGenerator</code> bean，<a href="#listing13">清单 13</a> 将类型指定为 <code>GroovyScriptFactory</code>。第二个参数指定脚本源代码的位置，和前面一样，在闭包中设置 <code>companyName</code> 属性。它还定义一个名为 <code>scriptFactoryPostProcessor</code> 的 bean，其类型为 <code>ScriptFactoryPostProcessor</code>，它将用实际的用脚本编写的对象替换工厂 bean。</p>
			<p><a name="N1035A"><span class="smalltitle">哪种配置选项最好？</span></a></p>
			<p>至此，您已经看到配置基于 Groovy 的 bean（无论是已编译的还是用脚本编写的）的几种不同的方式。如果您仅是使用 Groovy 替代 Java 作为应用程序的主要语言，那么配置这些 bean 与配置基于 Java 的 bean 没有区别。对于已编译的 Groovy 类，可以使用 XML 或基于注释的配置进行配置。</p>
			<p>对于用脚本编写的 Groovy 对象，虽然可以用几种不同的方式来配置它们，但是 <code>&lt;lang:groovy&gt;</code> 选项却是最简洁的方式，与使用 <code>GroovyScriptFactory</code> 和 <code>ScriptFactoryPostProcessor</code> 或者使用 <code>&lt;lang:inline-script&gt;</code> 进行配置相比，这种选项能够最清晰地表现意图。</p>
			<p>您还看到了 Grails Bean Builder，它以完全不同的方式创建大多数 Spring 应用程序使用的 Spring 应用程序上下文。如果要用 Groovy 创建所有的 bean，并且要能够添加逻辑到 bean 构建过程中，Bean Builder 必须很好地符合要求。另一方面，使用 Bean Builder 定义 Groovy bean 时，需要使用 <code>GroovyScriptFactory</code> 和 <code>ScriptFactoryPostProcessor</code> 来定义 bean。</p>
			<br /><table border="0" cellspacing="0" cellpadding="0" width="100%"><tr><td><img width="100%" src="//www.ibm.com/i/v14/rules/blue_rule.gif" height="1" alt=""/><br /><img alt="" width="8" height="6" border="0" src="//www.ibm.com/i/c.gif"/></td></tr></table><table class="no-print" cellspacing="0" cellpadding="0" align="right"><tr align="right"><td><img width="100%" height="4" src="//www.ibm.com/i/c.gif" alt=""/><br /><table border="0" cellpadding="0" cellspacing="0"><tr><td valign="middle"><img width="16" src="//www.ibm.com/i/v14/icons/u_bold.gif" height="16" border="0" alt=""/><br /></td><td valign="top" align="right"><a href="#main" class="fbox"><b>回页首</b></a></td></tr></table></td></tr></table><br /><br /><p><a name="N10380"><span class="atitle">使用 Groovy bean</span></a></p>
			<p>bean 配置和可用的几个选项是集成 Groovy 和 Spring 的难点（但是如您所见，这并不是很难）。实际上，在 Spring 应用程序中使用 Groovy bean 很容易。Spring 的动态语言支持使得 bean 的使用对于应用程序代码是完全透明的，应用程序代码不需要知道也不需要关心实现细节。您可以像平常开发 Spring 应用程序一样编写应用程序代码，并且可以利用 Spring 提供的所有特性，例如依赖项注入、AOP 和与第三方框架集成。</p>
			<p>清单 14 展示了一个简单的 Groovy 脚本，它从 XML 配置文件创建一个 Spring 应用程序上下文，获取 PDF 生成器 bean，并使用它生成一个发票的 PDF 版本：</p>
			<br /><a name="listing14"><b>清单 14. 在脚本中使用 Groovy bean</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
def context = new ClassPathXmlApplicationContext("applicationContext.xml")
def generator = context.getBean("pdfGenerator")

Invoice invoice = new Invoice(orderNumber: "12345", orderDate: new Date())
invoice.lineItems = [
    new LineItem(quantity: 1, description: 'Groovy in Action (ebook)', price: 22.00),
    new LineItem(quantity: 1, description: 'Programming Erlang', price: 45.00),
    new LineItem(quantity: 2, description: 'iText in Action (ebook)', price: 22.00)
]

byte[] invoicePdf = generator.pdfFor(invoice)

FileOutputStream file = new FileOutputStream("Invoice-${invoice.orderNumber}.pdf")
file.withStream {
    file.write(invoicePdf)
}
println "Generated invoice $invoice.orderNumber"
</pre></td></tr></table><br />
			<p>在 <a href="#listing14">清单 14</a> 中，大部分代码用于创建 Spring <code>ApplicationContext</code>，创建发票并将它写出到一个文件。使用 <code>pdfGenerator</code> bean 生成发票仅需一行代码。在通常的 Spring 应用程序中，在应用程序启动时引导一次应用程序上下文，然后，应用程序中的组件只需使用 Spring 为它们提供的依赖项。在 Spring Web 应用程序中，可以配置一个 servlet 上下文侦听器，在应用程序启动时引导 Spring。例如，可以定义一个 PDF 发票生成服务，如清单 15 所示：</p>
			<br /><a name="listing15"><b>清单 15. 使用 PDF 生成器的服务类</b></a><br /><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
@Service
public class InvoicePdfServiceImpl implements InvoicePdfService {

    @Autowired
    private PdfGenerator pdfGenerator;

    public byte[] generatePdf(Long invoiceId) {
        Invoice invoice = getInvoiceSomehow(invoiceId);
        return pdfGenerator.pdfFor(invoice);
    }

    // Rest of implementation...

}
</pre></td></tr></table><br />
			<p>清单 15 中的 <code>InvoicePdfServiceImpl</code> 类刚好被实现为一个 Java 类，它依赖于 <code>PdfGenerator</code>。可以很方便地将它实现为 Groovy bean。可以通过任何以编译的或用脚本编写的 bean 配置来使用 <code>GroovyPdfGenerator</code> 实现，而 <code>InvoicePdfServiceImpl</code> 对此一无所知。因此，使用 Groovy（或任何动态语言）对应用程序代码而言是透明的。这样很好，因为实现了组件之间的松散耦合，从而使单元测试更加容易，并且可以使用最适合的实现语言。</p>
			<br /><table border="0" cellspacing="0" cellpadding="0" width="100%"><tr><td><img width="100%" src="//www.ibm.com/i/v14/rules/blue_rule.gif" height="1" alt=""/><br /><img alt="" width="8" height="6" border="0" src="//www.ibm.com/i/c.gif"/></td></tr></table><table class="no-print" cellspacing="0" cellpadding="0" align="right"><tr align="right"><td><img width="100%" height="4" src="//www.ibm.com/i/c.gif" alt=""/><br /><table border="0" cellpadding="0" cellspacing="0"><tr><td valign="middle"><img width="16" src="//www.ibm.com/i/v14/icons/u_bold.gif" height="16" border="0" alt=""/><br /></td><td valign="top" align="right"><a href="#main" class="fbox"><b>回页首</b></a></td></tr></table></td></tr></table><br /><br /><p><a name="N103C1"><span class="atitle">结束语</span></a></p>
			<p>您已经看到了配置 Groovy 语言 bean 的一些不同的方式，以及在基于 Spring 的应用程序中使用它们是多么容易。您可以像使用 Java 类一样使用已编译的 Groovy 类。您还看到了配置用脚本编写的 Groovy 对象的一些不同的方式。应该选择的选项取决于如何在应用程序中使用 Groovy。还可以在同一个应用程序中结合使用已编译的和用脚本编写的 Groovy bean。实际上，如果希望的话，还可以在同一个应用程序中同时使用 Java、Groovy、JRuby 和 BeanShell bean，但我不建议这样做。作为开发人员，必须权衡在同一应用程序中使用多种语言的优点和缺点。</p>
			<p>作为一种语言，Groovy 比 Java 更灵活，这使它成为很有吸引力的选择，即使仅选择编译 Groovy 类也是如此。Spring 可以集成用脚本编写的动态语言 bean，这使人们更加喜欢选择 Groovy，因为可以在用脚本编写的 bean 中引入附加的逻辑和灵活性。例如，正如前面看到的那样，可以根据业务逻辑添加确定应用程序启动时应该实例化的 bean 类型的逻辑。或者，可以将用脚本编写的对象部署到 .groovy 文件中，使 Web 应用程序的部署更加灵活。.groovy 文件位于应用程序的 <code>CLASSPATH</code> 中或文件系统中的某个地方，而不是打包在 WAR 文件中。</p>
			<p>到目前为止，您看到的所有东西都为 Spring 工具箱增加了灵活性和威力。但是，Spring 动态语言支持中最引人注目的特性可能是<i>在应用程序运行时</i> 监视和检测对动态语言脚本的更改，并在 Spring 应用程序上下文中<i>自动重新装载</i> 更改后的 bean。第 2 部分将深入探索这个功能。包含 bean 的静态配置在运行时不能更改，与之对比，这个功能提供了很大的灵活性。</p>
		<br /><br /><table border="0" cellspacing="0" cellpadding="0" width="100%"><tr><td><img width="100%" src="//www.ibm.com/i/v14/rules/blue_rule.gif" height="1" alt=""/><br /><img alt="" width="8" height="6" border="0" src="//www.ibm.com/i/c.gif"/></td></tr></table><table class="no-print" cellspacing="0" cellpadding="0" align="right"><tr align="right"><td><img width="100%" height="4" src="//www.ibm.com/i/c.gif" alt=""/><br /><table border="0" cellpadding="0" cellspacing="0"><tr><td valign="middle"><img width="16" src="//www.ibm.com/i/v14/icons/u_bold.gif" height="16" border="0" alt=""/><br /></td><td valign="top" align="right"><a href="#main" class="fbox"><b>回页首</b></a></td></tr></table></td></tr></table><br /><br /><p><span class="atitle"><a name="download">下载</a></span></p><table width="100%" class="data-table-1" cellspacing="0" cellpadding="0" border="0"><tr><th scope="col">描述</th><th scope="col">名字</th><th scope="col">大小</th><th scope="col">下载方法</th></tr><tr><th class="tb-row" scope="row">样例代码</th><td nowrap="nowrap">j-groovierspringcode.zip</td><td nowrap="nowrap">8.5MB</td><td nowrap="nowrap"><a class="fbox" onclick="sa_onclick(this.href)" onkeypress="sa_onclick(this.href)" href="http://download.boulder.ibm.com/ibmdl/pub/software/dw/java/j-groovierspringcode.zip"><b>HTTP</b></a></td></tr></table><table cellspacing="0" cellpadding="0" border="0"><tr valign="top"><td colspan="5"><img alt="" width="12" height="12" border="0" src="//www.ibm.com/i/c.gif"/></td></tr><tr><td><img alt="" height="16" width="16" src="//www.ibm.com/i/v14/icons/fw.gif"/></td><td><a class="fbox" href="/developerworks/cn/whichmethod.html">关于下载方法的信息</a></td><td><img alt="" height="1" width="50" src="//www.ibm.com/i/c.gif"/></td></tr></table><br /><br /><p><a name="resources"><span class="atitle">参考资料 </span></a></p><b>学习</b><br /><ul><li>您可以参阅本文在 developerWorks 全球网站上的 <a href="http://www.ibm.com/developerworks/java/library/j-groovierspring1.html" onmouseover="linkQueryAppend(this)" target="_blank">英文原文</a>。<br /><br /></li><li>
				<a href="http://www.springframework.org/">Spring 框架</a>：Sring 的来源。
<br /><br /></li><li>
				<a href="http://www.ibm.com/developerworks/cn/views/java/libraryview.jsp?search_by=Spring+%E7%B3%BB%E5%88%97"><i>Spring 系列</i></a>（Naveen Balani，developerWorks，2005）：这个包含 4 部分的系列介绍了 Spring 框架。
<br /><br /></li><li>
“<a href="http://www.infoq.com/articles/spring-2.5-part-1/">What's New in Spring 2.5?</a>”（Mark Fisher，InfoQ，2007 年 11 月）：了解 Spring 框架的最新改进。
<br /><br /></li><li>
				<a href="http://static.springframework.org/spring/docs/2.5.x/reference/dynamic-language.html"> Spring Dynamic Language Support</a>：Spring 参考指南中的这一章论述了 Spring 中的动态语言支持。
<br /><br /></li><li>
				<a href="http://groovy.codehaus.org/">Groovy</a>：访问 Groovy 语言的主页。
<br /><br /></li><li>
				<a href="http://www.ibm.com/developerworks/cn/java/j-pg/"><i>实战 Groovy</i></a>：这个 developerWorks 系列专门探索 Groovy 的实际使用，并教您何时以及如何成功地应用它们。
<br /><br /></li><li>
				<a href="http://www.pragprog.com/titles/vslg/programming-groovy/"><i>Programming Groovy</i></a>（Venkat Subramaniam，实用程序员，2008 年）：这本书包含很多关于使用 Groovy 中的元编程特性的建议。
<br /><br /></li><li>
				<a href="http://grails.org/Spring+Bean+Builder">Grails Bean Builder</a>：编程式地构建 Spring bean。
<br /><br /></li><li>
				<a href="http://www.lowagie.com/iText/">iText PDF Library</a>：使用 iText 库轻松地创建和使用 PDF 文档。
<br /><br /></li><li>
				<a href="http://www.ibm.com/developerworks/cn/java/">developerWorks Java 技术专区</a>：这里有数百篇关于 Java 编程各个方面的文章。
<br /><br /></li><li>浏览 <a href="http://www.ibm.com/developerworks/apps/SendTo?bookstore=safari">技术书店</a>，找到关于这些主题和其他技术主题的图书。
<br /><br /></li></ul><br /><b>获得产品和技术</b><br /><ul><li>
				<a href="http://springframework.org/download/">Spring</a>：下载最新的 Spring 发行版。
<br /><br /></li><li>
				<a href="http://groovy.codehaus.org/Download">Groovy</a>：下载最新的 Groovy 发行版。
</li></ul><br /><b>讨论</b><br /><ul><li>访问 <a href="http://www.ibm.com/developerworks/blogs/" onmouseover="linkQueryAppend(this)">developerWorks blogs</a> 并加入 <a href="http://www.ibm.com/developerworks/community" onmouseover="linkQueryAppend(this)">developerWorks 社区</a>。
<br /><br /></li></ul><br /><br /><p><a name="author"><span class="atitle">关于作者</span></a></p><table border="0" cellspacing="0" cellpadding="0" width="100%"><tr><td colspan="3"><img alt="" width="100%" height="5" src="//www.ibm.com/i/c.gif"/></td></tr><tr align="left" valign="top"><td><p><img alt="Scott Leberknight" src="http://www.ibm.com/developerworks/i/p-sleberknight.jpg" align="left"/></p></td><td><img alt="" width="4" height="5" src="//www.ibm.com/i/c.gif"/></td><td width="100%"><p>Scott Leberknight 14 年来一直从事软件开发。他是 Near Infinity Corporation 的首席架构师，经常在 No Fluff Just Stuff 研讨会和其他开发人员研讨会上发表演讲。</p></td></tr></table><br /><br /><br /><p class="no-print"><span class="atitle"><a name="rate">对本文的评价</a></span></p><span class="no-print"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr valign="top"><td><form action="https://www.ibm.com/developerworks/secure/cnratings.jsp" method="GET"><input value="Groovy 使 Spring 更出色，第 1 部分: 集成的基础知识" name="ArticleTitle" type="hidden"/><input value="Java technology, Open source" name="Zone" type="hidden"/><input value="http://www.ibm.com/developerworks/cn/thankyou/" name="RedirectURL" type="hidden"/><input value="china" name="localsite" type="hidden"/><script language="javascript">document.write('<input type="hidden" name="url" value="'+location.href+'" />');</script><table cellspacing="0" cellpadding="0" border="0"><tr><td><img alt="" border="0" height="8" width="100" src="//www.ibm.com/i/c.gif"/></td></tr><tr valign="top"><td><input value="1" name="Rating" type="RADIO"/>太差！ (1)</td></tr><tr valign="top"><td><input value="2" name="Rating" type="RADIO"/>需提高 (2)</td></tr><tr valign="top"><td><input value="3" name="Rating" type="RADIO"/>一般；尚可 (3)</td></tr><tr valign="top"><td><input value="4" name="Rating" type="RADIO"/>好文章 (4)</td></tr><tr valign="top"><td><input value="5" name="Rating" type="RADIO"/>真棒！(5)</td></tr></table><br /><b>建议？</b><br /><textarea cols="60" rows="5" wrap="virtual" id="Comments" name="Comments"> </textarea><br /><br /><input value="反馈意见" type="SUBMIT"/></form></td></tr><tr valign="top"><td bgcolor="#FFFFFF"><img alt="" border="0" height="8" width="100" src="//www.ibm.com/i/c.gif"/></td></tr></table></span><br /><p><!-- --></p><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><br /><!--END RESERVED FOR FUTURE USE INCLUDE FILES--><br /><span class="no-print"><table cellspacing="0" cellpadding="0" align="right"><tr align="right"><td><img width="100%" height="8" src="//www.ibm.com/i/c.gif" alt=""/><br /><table border="0" cellpadding="0" cellspacing="0"><tr><td valign="middle"><img width="16" src="//www.ibm.com/i/v14/icons/u_bold.gif" height="16" border="0" alt=""/><br /></td><td valign="top" align="right"><a href="#main" class="fbox"><b>回页首</b></a></td></tr></table></td></tr></table><br /><br /></span></td><td width="10"><img alt="" height="1" width="10" src="//www.ibm.com/i/c.gif"/></td></tr></table><p class="greytext">Java 和所有基于 Java 的商标是 Sun Microsystems 公司在美国和/或其他国家的商标。  其他公司、产品或服务的名称可能是其他公司的商标或服务标志。</p><span class="small">IBM 公司保留在 developerWorks 网站上发表的内容的著作权。未经IBM公司或原始作者的书面明确许可，请勿转载。如果您希望转载，请通过 <a href="https://www.ibm.com/developerworks/secure/reprintreq.jsp?domain=dwchina">提交转载请求表单</a> 联系我们的编辑团队。</span></td></tr></table><!--FOOTER_BEGIN--><!-- IBM FOOTER -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">

<tr>
<td class="bbg" height="19">
<table border="0" cellpadding="0" cellspacing="0">
<tr>
<td><span class="spacer">&nbsp;&nbsp;&nbsp;&nbsp;</span><a class="mainlink" href="http://www.ibm.com/cn/ibm/index.shtml">关于 IBM</a></td>
<td class="footer-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td><a class="mainlink" href="http://www.ibm.com/cn/ibm/privacy/index.shtml">隐私条约</a></td>
<td class="footer-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td><a class="mainlink" href="http://www.ibm.com/contact/cn/">联系 IBM</a></td>
<td class="footer-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td><a class="mainlink" href="http://www.ibm.com/legal/cn/zh/">使用条款</a></td>
</tr>
</table>
</td>
</tr>
</table>

<!-- end footer -->
<script type="text/javascript" language="JavaScript1.2" src="//www.ibm.com/common/stats/stats.js"></script>
<noscript><img src="//stats.www.ibm.com/rc/images/uc.GIF?R=noscript" width="1" height="1" alt="" border="0" /></noscript><!--FOOTER_END--><!--XSLT stylesheet used to transform this file:  dw-document-html-5.11.xsl--></body></html>